{"ast":null,"code":"// import React, { useContext } from \"react\";\n// import * as yup from \"yup\";\n// import { FieldArray, Form, Formik, getIn } from \"formik\";\n// import { TextField, Button } from \"@mui/material\";\n// import { generate } from \"shortid\";\n// import DataContext from \"../DataContext\";\n// const validationSchema = yup.object().shape({\n//   combatants: yup.array().of(\n//     yup.object().shape({\n//       name: yup.string().max(10),\n//       hp: yup.string().min(2),\n//     })\n//   ),\n// });\n// const PlayerFormm = (props) => {\n//   const { pushData } = useContext(DataContext);\n//   return (\n//     <div>\n//       <Formik\n//         initialValues={{\n//           combatants: [{ id: generate(), name: \"\", hp: \"\", type: props.name }],\n//         }}\n//         onSubmit={(values) => {\n//           pushData(values);\n//         }}\n//         validationSchema={validationSchema}\n//       >\n//         {({ values, handleChange, errors }) => (\n//           <Form>\n//             <FieldArray name=\"combatants\">\n//               {({ push, remove }) => (\n//                 <div>\n//                   <div>\n//                     <h2>{props.name}</h2>\n//                     <Button\n//                       type=\"button\"\n//                       onClick={() =>\n//                         push({\n//                           id: generate(),\n//                           name: \"\",\n//                           hp: \"\",\n//                           type: props.name,\n//                         })\n//                       }\n//                     >\n//                       Add New Field\n//                     </Button>\n//                   </div>\n//                   {values.combatants.map((combatant, index) => {\n//                     const name = `combatants[${index}.name]`;\n//                     const errorMessage = getIn(errors, name);\n//                     return (\n//                       <div key={combatant.id}>\n//                         <TextField\n//                           name={name}\n//                           value={combatant.name}\n//                           onChange={handleChange}\n//                         />\n//                         <TextField\n//                           name={`combatants[${index}.hp]`}\n//                           value={combatant.hp}\n//                           onChange={handleChange}\n//                         />\n//                         <Button onClick={() => remove(index)}>x</Button>\n//                       </div>\n//                     );\n//                   })}\n//                 </div>\n//               )}\n//             </FieldArray>\n//             <button type=\"submit\">Submit</button>\n//             <pre>{JSON.stringify(values, null, 2)}</pre>\n//           </Form>\n//         )}\n//       </Formik>\n//     </div>\n//   );\n// };\n// export default PlayerFormm;","map":{"version":3,"names":[],"sources":["/home/visna/Code/dnd-tool/src/components/PlayerForm.js"],"sourcesContent":["// import React, { useContext } from \"react\";\n// import * as yup from \"yup\";\n// import { FieldArray, Form, Formik, getIn } from \"formik\";\n// import { TextField, Button } from \"@mui/material\";\n// import { generate } from \"shortid\";\n// import DataContext from \"../DataContext\";\n\n// const validationSchema = yup.object().shape({\n//   combatants: yup.array().of(\n//     yup.object().shape({\n//       name: yup.string().max(10),\n//       hp: yup.string().min(2),\n//     })\n//   ),\n// });\n\n// const PlayerFormm = (props) => {\n//   const { pushData } = useContext(DataContext);\n//   return (\n//     <div>\n//       <Formik\n//         initialValues={{\n//           combatants: [{ id: generate(), name: \"\", hp: \"\", type: props.name }],\n//         }}\n//         onSubmit={(values) => {\n//           pushData(values);\n//         }}\n//         validationSchema={validationSchema}\n//       >\n//         {({ values, handleChange, errors }) => (\n//           <Form>\n//             <FieldArray name=\"combatants\">\n//               {({ push, remove }) => (\n//                 <div>\n//                   <div>\n//                     <h2>{props.name}</h2>\n//                     <Button\n//                       type=\"button\"\n//                       onClick={() =>\n//                         push({\n//                           id: generate(),\n//                           name: \"\",\n//                           hp: \"\",\n//                           type: props.name,\n//                         })\n//                       }\n//                     >\n//                       Add New Field\n//                     </Button>\n//                   </div>\n//                   {values.combatants.map((combatant, index) => {\n//                     const name = `combatants[${index}.name]`;\n//                     const errorMessage = getIn(errors, name);\n//                     return (\n//                       <div key={combatant.id}>\n//                         <TextField\n//                           name={name}\n//                           value={combatant.name}\n//                           onChange={handleChange}\n//                         />\n//                         <TextField\n//                           name={`combatants[${index}.hp]`}\n//                           value={combatant.hp}\n//                           onChange={handleChange}\n//                         />\n//                         <Button onClick={() => remove(index)}>x</Button>\n//                       </div>\n//                     );\n//                   })}\n//                 </div>\n//               )}\n//             </FieldArray>\n//             <button type=\"submit\">Submit</button>\n//             <pre>{JSON.stringify(values, null, 2)}</pre>\n//           </Form>\n//         )}\n//       </Formik>\n//     </div>\n//   );\n// };\n\n// export default PlayerFormm;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}