{"ast":null,"code":"var _jsxFileName = \"/home/visna/Code/dnd-tool2/src/components/field-array.js\";\nimport React from \"react\";\nimport * as yup from \"yup\";\nimport { Field, FieldArray, FieldProps, Form, Formik, getIn } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object().shape({\n  combatants: yup.array().of(yup.object().shape({\n    name: yup.string().max(10),\n    hp: yup.string().min(2)\n  }))\n});\n\nconst Input = _ref => {\n  let {\n    field,\n    form: {\n      errors\n    }\n  } = _ref;\n  const errorMessage = getIn(errors, field.name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, { ...field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Input;\n\nconst PlayerForm = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        combatants: [{\n          id: \"5\",\n          name: \"asd\",\n          hp: \"5\"\n        }]\n      },\n      onSubmit: () => {},\n      validationSchema: validationSchema,\n      children: _ref2 => {\n        let {\n          values,\n          handleChange\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"combatants\",\n            children: _ref3 => {\n              let {\n                push,\n                remove\n              } = _ref3;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [values.combatants.map((combatant, index) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      name: `combatants[${index}.name]`,\n                      value: combatant.name,\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 43,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                      name: `combatants[${index}.hp]`,\n                      value: combatant.hp,\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 48,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      onClick: () => remove(index),\n                      children: \"x\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 53,\n                      columnNumber: 25\n                    }, this)]\n                  }, combatant.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 42,\n                    columnNumber: 23\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => push({\n                    id: generate(),\n                    name: \"\",\n                    hp: \"\"\n                  }),\n                  children: \"Add New Field\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(values, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = PlayerForm;\nexport default PlayerForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"PlayerForm\");","map":{"version":3,"names":["React","yup","Field","FieldArray","FieldProps","Form","Formik","getIn","TextField","Button","generate","validationSchema","object","shape","combatants","array","of","name","string","max","hp","min","Input","field","form","errors","errorMessage","color","PlayerForm","id","values","handleChange","push","remove","map","combatant","index","JSON","stringify"],"sources":["/home/visna/Code/dnd-tool2/src/components/field-array.js"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport { Field, FieldArray, FieldProps, Form, Formik, getIn } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\n\nconst validationSchema = yup.object().shape({\n  combatants: yup.array().of(\n    yup.object().shape({\n      name: yup.string().max(10),\n      hp: yup.string().min(2),\n    })\n  ),\n});\n\nconst Input = ({ field, form: { errors } }: FieldProps) => {\n  const errorMessage = getIn(errors, field.name);\n\n  return (\n    <>\n      <TextField {...field} />\n      {errorMessage && <div style={{ color: \"red\" }}>{errorMessage}</div>}\n    </>\n  );\n};\n\nconst PlayerForm = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={{ combatants: [{ id: \"5\", name: \"asd\", hp: \"5\" }] }}\n        onSubmit={() => {}}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <FieldArray name=\"combatants\">\n              {({ push, remove }) => (\n                <div>\n                  {values.combatants.map((combatant, index) => {\n                    return (\n                      <div key={combatant.id}>\n                        <TextField\n                          name={`combatants[${index}.name]`}\n                          value={combatant.name}\n                          onChange={handleChange}\n                        />\n                        <TextField\n                          name={`combatants[${index}.hp]`}\n                          value={combatant.hp}\n                          onChange={handleChange}\n                        />\n                        <div onClick={() => remove(index)}>x</div>\n                      </div>\n                    );\n                  })}\n                  <Button\n                    type=\"button\"\n                    onClick={() => push({ id: generate(), name: \"\", hp: \"\" })}\n                  >\n                    Add New Field\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            {/* <FieldArray name=\"combatants\">\n              {({ push }) => (\n                <div>\n                  <Button\n                    type=\"button\"\n                    onClick={() => push({ id: generate(), name: \"\", hp: \"\" })}\n                  >\n                    add to list\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            {values.combatants.map((combatant, index) => {\n              return (\n                <div key={combatant.id}>\n                  <TextField\n                    name={`combatants[${index}.name]`}\n                    value={combatant.name}\n                    onChange={handleChange}\n                  />\n                  <button\n                    onClick={(e) => {\n                      console.log(e.target);\n                    }}\n                  >\n                    X\n                  </button>\n                </div>\n              );\n            })} */}\n\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default PlayerForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}