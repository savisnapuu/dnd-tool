{"ast":null,"code":"var _jsxFileName = \"/home/visna/Code/dnd-tool2/src/components/field-array.js\";\nimport React from \"react\";\nimport * as yup from \"yup\";\nimport { Field, FieldArray, FieldProps, Form, Formik, getIn } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object().shape({\n  combatants: yup.array().of(yup.object().shape({\n    name: yup.string().max(10),\n    hp: yup.string().min(2)\n  }))\n});\n\nconst PlayerForm = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        combatants: [{\n          id: \"5\",\n          name: \"asd\",\n          hp: \"5\"\n        }]\n      },\n      onSubmit: () => {},\n      validationSchema: validationSchema,\n      children: _ref => {\n        let {\n          values,\n          handleChange\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"combatants\",\n            children: _ref2 => {\n              let {\n                push\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => push({\n                    id: generate(),\n                    name: \"\",\n                    hp: \"\"\n                  }),\n                  children: \"add to list\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 29,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), values.combatants.map((combatant, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                name: `combatants[${index}.name]`,\n                value: combatant.name,\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: console.log(index),\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this)]\n            }, combatant.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(values, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlayerForm;\nexport default PlayerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerForm\");","map":{"version":3,"names":["React","yup","Field","FieldArray","FieldProps","Form","Formik","getIn","TextField","Button","generate","validationSchema","object","shape","combatants","array","of","name","string","max","hp","min","PlayerForm","id","values","handleChange","push","map","combatant","index","console","log","JSON","stringify"],"sources":["/home/visna/Code/dnd-tool2/src/components/field-array.js"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport { Field, FieldArray, FieldProps, Form, Formik, getIn } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\n\nconst validationSchema = yup.object().shape({\n  combatants: yup.array().of(\n    yup.object().shape({\n      name: yup.string().max(10),\n      hp: yup.string().min(2),\n    })\n  ),\n});\n\nconst PlayerForm = () => {\n  return (\n    <div>\n      <Formik\n        initialValues={{ combatants: [{ id: \"5\", name: \"asd\", hp: \"5\" }] }}\n        onSubmit={() => {}}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleChange }) => (\n          <Form>\n            <FieldArray name=\"combatants\">\n              {({ push }) => (\n                <div>\n                  <Button\n                    type=\"button\"\n                    onClick={() => push({ id: generate(), name: \"\", hp: \"\" })}\n                  >\n                    add to list\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            {values.combatants.map((combatant, index) => {\n              return (\n                <div key={combatant.id}>\n                  <TextField\n                    name={`combatants[${index}.name]`}\n                    value={combatant.name}\n                    onChange={handleChange}\n                  />\n                  <button onClick={console.log(index)}>X</button>\n                </div>\n              );\n            })}\n\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default PlayerForm;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8CC,MAA9C,EAAsDC,KAAtD,QAAmE,QAAnE;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,eAAlC;AACA,SAASC,QAAT,QAAyB,SAAzB;;AAEA,MAAMC,gBAAgB,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;EAC1CC,UAAU,EAAEb,GAAG,CAACc,KAAJ,GAAYC,EAAZ,CACVf,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;IACjBI,IAAI,EAAEhB,GAAG,CAACiB,MAAJ,GAAaC,GAAb,CAAiB,EAAjB,CADW;IAEjBC,EAAE,EAAEnB,GAAG,CAACiB,MAAJ,GAAaG,GAAb,CAAiB,CAAjB;EAFa,CAAnB,CADU;AAD8B,CAAnB,CAAzB;;AASA,MAAMC,UAAU,GAAG,MAAM;EACvB,oBACE;IAAA,uBACE,QAAC,MAAD;MACE,aAAa,EAAE;QAAER,UAAU,EAAE,CAAC;UAAES,EAAE,EAAE,GAAN;UAAWN,IAAI,EAAE,KAAjB;UAAwBG,EAAE,EAAE;QAA5B,CAAD;MAAd,CADjB;MAEE,QAAQ,EAAE,MAAM,CAAE,CAFpB;MAGE,gBAAgB,EAAET,gBAHpB;MAAA,UAKG;QAAA,IAAC;UAAEa,MAAF;UAAUC;QAAV,CAAD;QAAA,oBACC,QAAC,IAAD;UAAA,wBACE,QAAC,UAAD;YAAY,IAAI,EAAC,YAAjB;YAAA,UACG;cAAA,IAAC;gBAAEC;cAAF,CAAD;cAAA,oBACC;gBAAA,uBACE,QAAC,MAAD;kBACE,IAAI,EAAC,QADP;kBAEE,OAAO,EAAE,MAAMA,IAAI,CAAC;oBAAEH,EAAE,EAAEb,QAAQ,EAAd;oBAAkBO,IAAI,EAAE,EAAxB;oBAA4BG,EAAE,EAAE;kBAAhC,CAAD,CAFrB;kBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cADF;gBAAA;gBAAA;gBAAA;cAAA,QADD;YAAA;UADH;YAAA;YAAA;YAAA;UAAA,QADF,EAaGI,MAAM,CAACV,UAAP,CAAkBa,GAAlB,CAAsB,CAACC,SAAD,EAAYC,KAAZ,KAAsB;YAC3C,oBACE;cAAA,wBACE,QAAC,SAAD;gBACE,IAAI,EAAG,cAAaA,KAAM,QAD5B;gBAEE,KAAK,EAAED,SAAS,CAACX,IAFnB;gBAGE,QAAQ,EAAEQ;cAHZ;gBAAA;gBAAA;gBAAA;cAAA,QADF,eAME;gBAAQ,OAAO,EAAEK,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAjB;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QANF;YAAA,GAAUD,SAAS,CAACL,EAApB;cAAA;cAAA;cAAA;YAAA,QADF;UAUD,CAXA,CAbH,eA0BE;YAAA,UAAMS,IAAI,CAACC,SAAL,CAAeT,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;UAAN;YAAA;YAAA;YAAA;UAAA,QA1BF;QAAA;UAAA;UAAA;UAAA;QAAA,QADD;MAAA;IALH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAwCD,CAzCD;;KAAMF,U;AA2CN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}