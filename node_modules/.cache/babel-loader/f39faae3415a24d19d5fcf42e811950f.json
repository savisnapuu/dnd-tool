{"ast":null,"code":"var _jsxFileName = \"/home/visna/Code/dnd-tool2/src/components/FormA.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as yup from \"yup\";\nimport { FieldArray, Form, Formik, getIn, withFormik } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormA(props) {\n  _s();\n\n  const {\n    values,\n    handleChange,\n    onChange\n  } = props;\n  React.useEffect(() => {\n    if (onChange) {\n      onChange(values);\n    }\n  }, [values]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        combatants: [{\n          id: generate(),\n          name: \"\",\n          hp: \"\"\n        }]\n      },\n      onSubmit: values => setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n      }, 500),\n      validationSchema: null,\n      children: _ref => {\n        let {\n          values,\n          handleChange,\n          errors,\n          handleSubmit\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"combatants\",\n            children: _ref2 => {\n              let {\n                push,\n                remove\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Players\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 33,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"button\",\n                    onClick: () => push({\n                      id: generate(),\n                      name: \"\",\n                      hp: \"\"\n                    }),\n                    children: \"Add New Field\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 34,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 32,\n                  columnNumber: 19\n                }, this), values.combatants.map((combatant, index) => {\n                  const name = `combatants[${index}.name]`;\n                  const errorMessage = getIn(errors, name);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(TextField, {\n                      name: name,\n                      value: combatant.name,\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 46,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                      name: `combatants[${index}.hp]`,\n                      value: combatant.hp,\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 51,\n                      columnNumber: 25\n                    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        color: \"red\"\n                      },\n                      children: errorMessage\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 57,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => remove(index),\n                      children: \"x\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 59,\n                      columnNumber: 25\n                    }, this)]\n                  }, combatant.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 45,\n                    columnNumber: 23\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 17\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(values, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormA, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = FormA;\nexport default withFormik({\n  mapPropsToValues: () => {\n    return {\n      name: \"\"\n    };\n  }\n})(FormA);\n\nvar _c;\n\n$RefreshReg$(_c, \"FormA\");","map":{"version":3,"names":["React","yup","FieldArray","Form","Formik","getIn","withFormik","TextField","Button","generate","FormA","props","values","handleChange","onChange","useEffect","combatants","id","name","hp","setTimeout","alert","JSON","stringify","errors","handleSubmit","push","remove","map","combatant","index","errorMessage","color","mapPropsToValues"],"sources":["/home/visna/Code/dnd-tool2/src/components/FormA.js"],"sourcesContent":["import React from \"react\";\nimport * as yup from \"yup\";\nimport { FieldArray, Form, Formik, getIn, withFormik } from \"formik\";\nimport { TextField, Button } from \"@mui/material\";\nimport { generate } from \"shortid\";\n\nfunction FormA(props) {\n  const { values, handleChange, onChange } = props;\n\n  React.useEffect(() => {\n    if (onChange) {\n      onChange(values);\n    }\n  }, [values]);\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ combatants: [{ id: generate(), name: \"\", hp: \"\" }] }}\n        onSubmit={(values) =>\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n          }, 500)\n        }\n        validationSchema={null}\n      >\n        {({ values, handleChange, errors, handleSubmit }) => (\n          <Form>\n            <FieldArray name=\"combatants\">\n              {({ push, remove }) => (\n                <div>\n                  <div>\n                    <h2>Players</h2>\n                    <Button\n                      type=\"button\"\n                      onClick={() => push({ id: generate(), name: \"\", hp: \"\" })}\n                    >\n                      Add New Field\n                    </Button>\n                  </div>\n                  {values.combatants.map((combatant, index) => {\n                    const name = `combatants[${index}.name]`;\n                    const errorMessage = getIn(errors, name);\n                    return (\n                      <div key={combatant.id}>\n                        <TextField\n                          name={name}\n                          value={combatant.name}\n                          onChange={handleChange}\n                        />\n                        <TextField\n                          name={`combatants[${index}.hp]`}\n                          value={combatant.hp}\n                          onChange={handleChange}\n                        />\n                        {errorMessage && (\n                          <div style={{ color: \"red\" }}>{errorMessage}</div>\n                        )}\n                        <Button onClick={() => remove(index)}>x</Button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </FieldArray>\n            <button type=\"submit\">Submit</button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default withFormik({\n  mapPropsToValues: () => {\n    return {\n      name: \"\",\n    };\n  },\n})(FormA);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}