{"ast":null,"code":"var _jsxFileName = \"/home/visna/Code/dnd-tool2/src/components/FormA.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik, Form, FieldArray } from \"formik\";\nimport { Button, TextField } from \"@mui/material\";\nimport { generate } from \"shortid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormA = _ref => {\n  _s();\n\n  let {\n    onChange,\n    refId\n  } = _ref;\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required(\"This field is required\"),\n      email: Yup.string().email(\"Invalid email address\").required(\"Email is required\")\n    }),\n    onSubmit: () => {\n      watchForm();\n    }\n  });\n  React.useImperativeHandle(refId, () => ({\n    Submit: async () => {\n      await formik.submitForm();\n    }\n  }));\n\n  function watchForm() {\n    if (onChange) {\n      onChange({\n        values: formik.values,\n        validated: formik.isSubmitting ? Object.keys(formik.errors).length === 0 : false\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: _ref2 => {\n      let {\n        values,\n        handleChange,\n        errors\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FieldArray, {\n          name: \"combatants\",\n          children: _ref3 => {\n            let {\n              push,\n              remove\n            } = _ref3;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Players\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  onClick: () => push({\n                    id: generate(),\n                    name: \"\",\n                    hp: \"\"\n                  }),\n                  children: \"Add New Field\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, this), values.combatants.map((combatant, index) => {\n                const name = `combatants[${index}.name]`;\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(TextField, {\n                    name: name,\n                    value: combatant.name,\n                    onChange: handleChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 61,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                    name: `combatants[${index}.hp]`,\n                    value: combatant.hp,\n                    onChange: handleChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => remove(index),\n                    children: \"x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 23\n                  }, this)]\n                }, combatant.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 21\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(values, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this) // <form ref={refId}>\n  //   <div className={\"form\"}>\n  //     <h3>Form A</h3>\n  //     <div>\n  //       <label>Name </label>\n  //       <input\n  //         name=\"name\"\n  //         value={formik.values.name}\n  //         onBlur={formik.handleBlur}\n  //         onChange={formik.handleChange}\n  //       />\n  //       {formik.errors.name && (\n  //         <div style={{ color: \"red\" }}>\n  //           <small>{formik.errors.name}</small>\n  //         </div>\n  //       )}\n  //     </div>\n  //     <br />\n  //     <div>\n  //       <label>Email </label>\n  //       <input\n  //         name=\"email\"\n  //         value={formik.values.email}\n  //         onBlur={formik.handleBlur}\n  //         onChange={formik.handleChange}\n  //       />\n  //       {formik.errors.email && (\n  //         <div style={{ color: \"red\" }}>\n  //           <small>{formik.errors.email}</small>\n  //         </div>\n  //       )}\n  //     </div>\n  //     <pre>{JSON.stringify(formik.values, null, 2)}</pre>\n  //   </div>\n  // </form>\n  ;\n};\n\n_s(FormA, \"tE5xOtMgS5/QFQFNRYWVeJqi4L0=\", false, function () {\n  return [useFormik];\n});\n\n_c = FormA;\nexport default FormA;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormA\");","map":{"version":3,"names":["React","Yup","useFormik","Form","FieldArray","Button","TextField","generate","FormA","onChange","refId","formik","initialValues","name","email","validationSchema","object","string","required","onSubmit","watchForm","useImperativeHandle","Submit","submitForm","values","validated","isSubmitting","Object","keys","errors","length","handleChange","push","remove","id","hp","combatants","map","combatant","index","JSON","stringify"],"sources":["/home/visna/Code/dnd-tool2/src/components/FormA.js"],"sourcesContent":["import React from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik, Form, FieldArray } from \"formik\";\nimport { Button, TextField } from \"@mui/material\";\nimport { generate } from \"shortid\";\n\nconst FormA = ({ onChange, refId }) => {\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      email: \"\",\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required(\"This field is required\"),\n      email: Yup.string()\n        .email(\"Invalid email address\")\n        .required(\"Email is required\"),\n    }),\n    onSubmit: () => {\n      watchForm();\n    },\n  });\n\n  React.useImperativeHandle(refId, () => ({\n    Submit: async () => {\n      await formik.submitForm();\n    },\n  }));\n\n  function watchForm() {\n    if (onChange) {\n      onChange({\n        values: formik.values,\n        validated: formik.isSubmitting\n          ? Object.keys(formik.errors).length === 0\n          : false,\n      });\n    }\n  }\n\n  return (\n    <div>\n      {({ values, handleChange, errors }) => (\n        <Form>\n          <FieldArray name=\"combatants\">\n            {({ push, remove }) => (\n              <div>\n                <div>\n                  <h2>Players</h2>\n                  <Button\n                    type=\"button\"\n                    onClick={() => push({ id: generate(), name: \"\", hp: \"\" })}\n                  >\n                    Add New Field\n                  </Button>\n                </div>\n                {values.combatants.map((combatant, index) => {\n                  const name = `combatants[${index}.name]`;\n                  return (\n                    <div key={combatant.id}>\n                      <TextField\n                        name={name}\n                        value={combatant.name}\n                        onChange={handleChange}\n                      />\n                      <TextField\n                        name={`combatants[${index}.hp]`}\n                        value={combatant.hp}\n                        onChange={handleChange}\n                      />\n                      <Button onClick={() => remove(index)}>x</Button>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </FieldArray>\n          <button type=\"submit\">Submit</button>\n          <pre>{JSON.stringify(values, null, 2)}</pre>\n        </Form>\n      )}\n    </div>\n    // <form ref={refId}>\n    //   <div className={\"form\"}>\n    //     <h3>Form A</h3>\n    //     <div>\n    //       <label>Name </label>\n    //       <input\n    //         name=\"name\"\n    //         value={formik.values.name}\n    //         onBlur={formik.handleBlur}\n    //         onChange={formik.handleChange}\n    //       />\n    //       {formik.errors.name && (\n    //         <div style={{ color: \"red\" }}>\n    //           <small>{formik.errors.name}</small>\n    //         </div>\n    //       )}\n    //     </div>\n    //     <br />\n    //     <div>\n    //       <label>Email </label>\n    //       <input\n    //         name=\"email\"\n    //         value={formik.values.email}\n    //         onBlur={formik.handleBlur}\n    //         onChange={formik.handleChange}\n    //       />\n    //       {formik.errors.email && (\n    //         <div style={{ color: \"red\" }}>\n    //           <small>{formik.errors.email}</small>\n    //         </div>\n    //       )}\n    //     </div>\n    //     <pre>{JSON.stringify(formik.values, null, 2)}</pre>\n    //   </div>\n    // </form>\n  );\n};\n\nexport default FormA;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}